#================================================
### vim - vim book
#================================================
### Liens
#================================================

https://vimhelp.org/change.txt.html

#================================================
### Édition de base
#================================================
L'éditeur vim est l'un des éditeurs de texte les plus puissants du marché.
C'est aussi
extrêmement efficace, permettant à l'utilisateur d'éditer des fichiers avec
un minimum de frappes.
La puissance et la fonctionnalité ont cependant un coût : lors du démarrage,
les utilisateurs sont confrontés à un
courbe d’apprentissage abrupte.

Ce chapitre vous apprend l'ensemble de base de 10 commandes Vim dont
vous avez besoin pour commencer
édition. Dans ce chapitre, vous apprenez ce qui suit :

n Les quatre commandes de mouvement de base
n Comment insérer et supprimer du texte
n Comment obtenir de l'aide (très important)
n Quitter l'éditeur

Après avoir maîtrisé ces commandes, vous pouvez apprendre l'édition la plus avancée.
commandes.

Avant de commencer

Si vous n'avez pas installé Vim, vous devez lire l'Annexe A, « Installation de Vim » et
installez l'éditeur.

Si vous utilisez UNIX, exécutez la commande suivante :

$ touch ~/.vimrc

En créant un ~/.vimrc, vous indiquez à Vim que vous souhaitez l'utiliser en mode Vim.
Si ce fichier est n'est pas présent, Vim fonctionne en mode de compatibilité Vi
et vous perdez l'accès à de nombreux fonctionnalités avancées de Vim. Cependant,
vous pouvez activer les fonctionnalités avancées depuis
Vim à tout moment avec cette commande :

:set nocompatible<Enter>.

Si vous utilisez Microsoft Windows, le processus d'installation crée la
Version Microsoft Windows de ce fichier, _vimrc, pour vous.
Exécuter Vim pour la première fois
Pour démarrer Vim, entrez cette commande :

$ gvim file.txt

Notez que le $ est l'invite de commande UNIX par défaut. Votre invite peut différer.
Si vous utilisez Microsoft Windows, ouvrez une fenêtre d'invite MS-DOS et
entrez cette commande :

C:> gvim file.txt

(Encore une fois, votre invite peut différer.)
Dans les deux cas, Vim commence à éditer un fichier appelé file.txt.
Puisqu'il s'agit d'un nouveau fichier, vous
obtenir une fenêtre vide. La figure 1.1 montre à quoi ressemblera votre écran.
Les lignes tilde (~) indiquent les lignes qui ne figurent pas dans le fichier.
En d'autres termes, lorsque Vim est à court de
du fichier à afficher, il affiche des lignes tilde.
Au bas d'un écran, une ligne de message indique que le fichier s'appelle file.txt
et indique que vous créez un nouveau fichier.
Les informations du message sont temporaires
et d'autres informations les écrasent lorsque vous tapez le
premier personnage.

=====[TERMINAL]=====
~
~
~
~
~
~
~
~
« fichier.txt » [Nouveau fichier]
=====[TERMINAL]=====

Figure 1.1 Fenêtre initiale de Vim.

La commande vim

La commande gvim amène l'éditeur à créer une nouvelle fenêtre d'édition. Si tu utilises
la commande vim, l'édition s'effectue dans votre fenêtre de commande. Autrement dit, si
vous exécutez dans un xterm, l'éditeur utilise votre fenêtre xterm. Si vous utilisez
une fenêtre d'invite de commande MS-DOS sous Microsoft Windows, l'édition se produit
à l'intérieur de la fenêtre.

=====[TERMINAL]=====
La figure 1.2 montre une fenêtre d'invite de commande MS-DOStypique.

Une tortue très intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  Le système, voyez-vous,
  A couru aussi lentement que lui,
Et cela ne veut pas dire grand-chose pour la tortue.
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
"tortue.txt" 5L, 158C 1,1 Tous
=====[TERMINAL]=====

Figure 1.2 Édition avec la commande vim dans une fenêtre MS-DOS.

Modes

L'éditeur Vim est un éditeur modal. Cela signifie que l'éditeur se comporte différemment,
selon le mode dans lequel vous vous trouvez. Si le bas de l'écran affiche le nom du 
fichier ou est vide, vous êtes en mode normal. Si vous êtes en mode insertion, 
l'indicateur affiche --INSERT--; et si vous êtes en mode visuel, l'indicateur 
affiche --VISUAL--.

Montage pour la première fois

Les sections suivantes vous montrent comment modifier votre premier fichier. 
Au cours de ce processus, vous
apprenez les commandes de base que vous devez connaître pour utiliser Vim. 
A la fin de cette leçon,
vous saurez comment éditer – ni rapidement, ni efficacement, mais suffisamment 
pour faire le travail.

Insérer du texte

Pour saisir du texte, vous devez être en mode insertion. 
Tapez i et notez que le coin inférieur gauche de
l'écran devient --INSERT-- (ce qui signifie que vous êtes en mode insertion).

Tapez maintenant du texte. Il sera inséré dans le fichier. 
Ne vous inquiétez pas si vous faites
des erreurs; vous pourrez les corriger plus tard. 
Entrez le limerick du programmeur suivant :

=====[TERMINAL]=====
Une tortue très intelligente
J'ai trouvé que la programmation UNIX était un obstacle
Le système, voyez-vous,
A couru aussi lentement que lui,
Et cela ne veut pas dire grand-chose pour la tortue.
=====[TERMINAL]=====

Une fois l'insertion terminée, appuyez sur la touche <Esc>. L'indicateur --INSERT-- s'allume.
loin et vous revenez en mode commande.
Votre écran devrait maintenant ressembler à la figure 1.3.

=====[TERMINAL]=====
Une tortue très intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  Le système, voyez-vous,
  A couru aussi lentement que lui,
Et cela ne veut pas dire grand-chose pour la tortue.
~
~
~
~
=====[TERMINAL]=====

Se sortir du pétrin

L'un des problèmes rencontrés par les novices de Vim est la confusion des modes, 
provoquée par l'oubli
dans quel mode vous vous trouvez ou en tapant accidentellement une commande 
qui change de mode.
revenez au mode normal, quel que soit le mode dans lequel vous vous trouvez, 
appuyez sur la touche <Esc>.

Se déplacer

Après être revenu en mode commande, vous pouvez vous déplacer en utilisant ces touches : 
h (à gauche), j (en bas), k (en haut) et l (à droite). 
Au premier abord, il peut sembler que ces commandes étaient
choisi au hasard. Après tout, qui a déjà entendu parler de l'utilisation 
de l pour droite ? Mais en réalité, il existe un
une très bonne raison pour ces choix : déplacer le curseur est la chose la plus 
courante que vous faites.
faites dans un éditeur, et ces touches se trouvent sur la ligne d'accueil de votre 
main droite. En d'autre
mots, ces commandes sont placées là où vous pouvez les saisir le plus rapidement.

Note

Vous pouvez également déplacer le curseur à l'aide des touches fléchées.
Cependant, si vous le faites, vous ralentissez considérablement votre
édition : pour appuyer sur les touches fléchées, vous devez déplacer votre main 
des touches de texte vers les touches fléchées.
Étant donné que vous pouvez le faire des centaines de fois par heure, cela peut 
prendre beaucoup de temps.
temps. Si vous souhaitez éditer efficacement, utilisez h, j, k et l.
Il existe également des claviers qui ne disposent pas de touches fléchées 
ou qui les localisent à des endroits inhabituels ;
par conséquent, connaître l’utilisation de ces clés est utile dans ces situations.

Une façon de se souvenir de ces commandes est que 
h est à gauche, l est à droite, j est un
accrochez-vous et k pointe vers le haut. Une autre bonne façon de mémoriser 
les commandes est de
copiez ces informations sur un Post-It et placez-le sur le bord de votre moniteur 
jusqu'à ce que
on s'habitue à ces commandes.

Supprimer des caractères

Pour supprimer un caractère, déplacez le curseur dessus et tapez x. 
(C'est un retour au
bon vieux temps de la machine à écrire, où vous supprimiez des choses 
en tapant xxxx dessus.)
Déplacez le curseur au début de la première ligne, par exemple, et tapez xxxxxxx
(huit x) pour supprimer les huit premiers caractères de la ligne. 
La figure 1.4 montre le résultat.
Pour saisir une correction, tapez iA young <Esc>. Cela commence un insert (le i), 
insère le
mots A young, puis quitte le mode insertion (le <Esc> final). La figure 1.5 montre le
résultats.

=====[TERMINAL]=====
tortue intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  Le système, voyez-vous,
  A couru aussi lentement que lui,
Et cela ne veut pas dire grand-chose pour la tortue.
~
~
~
~
=====[TERMINAL]=====

Figure 1.4 Écran après suppression (xxxxxxxx).

=====[TERMINAL]=====
A young tortue intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  Le système, voyez-vous,
  A couru aussi lentement que lui,
Et cela ne veut pas dire grand-chose pour la tortue.
~
~
~
~
=====[TERMINAL]=====

Figure 1.5 Résultat de l'insertion.

Note

Vim est un éditeur de texte. Par défaut, il n'enveloppe pas le texte. 
Vous devez terminer chaque ligne en appuyant sur la touche <Entrée>
clé. Si vous ne le faites pas et continuez à taper lorsque vous atteignez la bonne marge, 
tout ce que vous ferez est d'insérer un très
longue ligne dans l'éditeur. Vous ne passerez pas automatiquement à la ligne suivante. 
Pour ce faire, vous devez appuyer sur la touche
Touche <Entrée>. (Il s'agit du mode de fonctionnement par défaut. 
Vous pouvez cependant configurer l'éditeur Vim pour effectuer un retour à la ligne, 
comme indiqué au chapitre 11, « Gestion des fichiers texte. »

Annuler et refaire

Supposons que vous en supprimiez trop. Eh bien, vous pouvez le saisir à nouveau, 
mais de manière plus simple.
existe. La commande u annule la dernière modification.
Jetez un œil à cela en action. Déplacez le curseur sur le A dans la première ligne. 
Maintenant, tapez
xxxxxxx pour supprimer A young. Le résultat est le suivant :

tortue intelligente

Tapez u pour annuler la dernière suppression. Cette suppression a supprimé le g, 
donc l'annulation restaure le
personnage.

g intelligent turtle

La commande u suivante restaure l'avant-dernier caractère supprimé :

ng intelligent turtle

La commande u suivante vous donne le u, et ainsi de suite :

ung intelligent turtle
oung intelligent turtle
young intelligent turtle
young intelligent turtle
A young intelligent turtle

Si vous annulez trop de fois, vous pouvez appuyer sur CTRL-R (refaire) 
pour annuler le précédent.
commande. En d’autres termes, cela annule l’annulation.
Pour voir cela en action, appuyez deux fois sur CTRL-R. 
Le caractère A et l'espace qui le suit
disparaître.

young intelligent turtle

Il existe une version spéciale de la commande d'annulation, 
la commande U (ligne d'annulation).
La commande d'annulation de ligne annule toutes les modifications apportées 
à la dernière ligne modifiée.
Taper cette commande deux fois annule le U précédent.

Note

Si vous êtes un ancien utilisateur de Vi, 
notez que l'annulation à plusieurs niveaux de Vim diffère considérablement 
du niveau unique.
disponible pour un utilisateur Vi.

Note

Tout au long de ce livre, nous supposons que vous avez désactivé la compatibilité Vi.
(La compatibilité Vi désactive
de nombreuses fonctionnalités avancées de Vim afin d'être compatible avec Vi.)
Cette fonctionnalité est automatiquement activée
désactivé pour les utilisateurs Unix lorsqu'ils créent le fichier $HOME/.vimrc.
Pour Microsoft Windows, il est désactivé pendant
installation. (Si la compatibilité est activée, la commande v fournit un niveau 
d'annulation.)

A very intelligent turtle

xxxx Supprimer very

A intelligent turtle

xxxxxx Supprimer turtle

A intelligent

Restaurer la ligne avec U

A very intelligent turtle

Un Second U annule le U précédent

A intelligent

Sortir

Pour quitter, utilisez la commande ZZ. Cette commande écrit le fichier et se termine.
Contrairement à de nombreux autres éditeurs, Vim ne crée pas automatiquement de fichier 
de sauvegarde. Si tu
tapez ZZ, vos modifications sont validées et il n’y a pas de retour en arrière. 
(Vous pouvez configurer
l'éditeur Vim pour produire des fichiers de sauvegarde, 
comme indiqué au chapitre 14, « Récupération de fichiers et
Arguments de ligne de commande. »)

Annuler les modifications

Parfois, vous ferez une série de changements et vous réaliserez soudain que 
vous étiez mieux loti.
avant de commencer. Ne t'inquiète pas; Vim a une commande 
« quitter et jeter les choses ». Il
est :q!.

Pour ceux d'entre vous intéressés par les détails, 
les trois parties de cette commande sont les
deux points (:), qui passe en mode commande ; la commande q, qui indique à l'éditeur de
quitter; et le modificateur de commande de remplacement (!). 
Le modificateur de commande de remplacement est
nécessaire car Vim est réticent à rejeter les modifications. 
Parce que c'est une commande
commande mode, vous devez taper <Entrée> pour la terminer. 
(Toutes les commandes du mode commande ont <Entrée> à la fin. 
Ceci n'est pas affiché dans le texte.)
Si vous deviez simplement taper :q, Vim afficherait un message d'erreur 
et refuserait de quitter :

No write since last change (use ! to override)
Aucune écriture depuis la dernière modification (utilisez ! pour remplacer)

En spécifiant le remplacement, vous dites en fait à Vim : « Je sais que ce que je fais
ça a l’air stupide, mais je suis un grand garçon et je veux vraiment faire ça.

Autres commandes d'édition

Maintenant que vous avez exécuté quelques commandes simples, il est temps de passer à
quelques opérations un peu plus complexes.
Insérer des caractères en fin de ligne
La commande i insère un caractère avant le caractère sous le curseur. Cela fonctionne
bien; mais que se passe-t-il si vous souhaitez ajouter des éléments 
à la fin de la ligne ? Pour cela tu
Vous devez insérer du texte après le curseur. Cela se fait avec la commande a (append).

Par exemple, pour changer la ligne
et cela ne veut pas dire grand-chose pour la tortue.
à
et ça ne veut pas dire grand chose pour la tortue !!!
déplacez le curseur sur le point à la fin de la ligne. Tapez ensuite x pour supprimer le
point.Le curseur est maintenant positionné en fin de ligne sur le e dans tortue :
et ça ne veut pas dire grand chose pour la tortue
Tapez maintenant a!!!<Esc> pour ajouter trois points d'exclamation après le e dans tortue :
et ça ne veut pas dire grand chose pour la tortue !!!

Supprimer une ligne

Pour supprimer une ligne, utilisez la commande dd, qui supprime la ligne sur laquelle 
se trouve le curseur
positionné. Pour supprimer par exemple la ligne médiane de cet exemple, 
positionnez le curseur
n'importe où sur la ligne Le système, voyez-vous, comme le montre la figure 1.6.
Tapez maintenant jj. La figure 1.7 montre les résultats.

Ouvrir de nouvelles lignes

Pour ajouter une nouvelle ligne, utilisez la commande o pour ouvrir une nouvelle 
ligne sous le curseur.
L'éditeur est alors placé en mode insertion.

Une tortue très intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  Le système, voyez-vous,
  A couru aussi lentement que lui,
Et ça ne veut pas dire grand chose pour la tortue !!!
~
~
"tortue.txt" 5L, 155c écrit

Figure 1.6 Écran avant la commande dd.

Une tortue très intelligente
J'ai trouvé que la programmation UNIX était un obstacle
  A couru aussi lentement que lui,
Et ça ne veut pas dire grand chose pour la tortue !!!
~
~
~
Figure 1.7 Écran après la commande dd.

Supposons, par exemple, que vous souhaitiez ajouter une ligne à l'exemple 
de texte juste en dessous du
troisième ligne. Commencez par laisser le curseur sur le Ran aussi lent. . . ligne, 
comme le montre la figure 1.7.
Tapez maintenant o pour ouvrir une nouvelle ligne. 
Saisissez le texte de la ligne puis appuyez sur <Esc>
pour terminer le mode insertion. La figure 1.8 montre les résultats.
Si vous souhaitez ouvrir une ligne au-dessus du curseur, 
utilisez la commande O (majuscule).

Aide

Enfin, il existe une autre commande importante, la commande help. 
Pour obtenir de l'aide, entrez
ce qui suit:
:aide
(N'oubliez pas le <Entrée> implicite pour les commandes en mode commande.) 
Cela affiche un
fenêtre d'aide générale, comme le montre la figure 1.9.

Si vous ne fournissez pas de sujet, :help affiche la fenêtre d'aide générale. 
Les créateurs de
Vim a fait quelque chose de très intelligent (ou de très paresseux) 
avec le système d'aide.
fenêtre d'aide une fenêtre d'édition normale. Vous pouvez utiliser toutes les 
commandes Vim normales pour
se déplacer dans les informations d'aide. Par conséquent, h, k, j et l 
se déplacent vers la gauche, le haut, le bas,
c'est vrai, et ainsi de suite.
Pour sortir du système d'aide, utilisez la même commande que celle utilisée pour 
sortir du système d'aide.
éditeur : ZZ.
En lisant le texte d'aide, vous remarquerez du texte entouré de barres verticales 
(par exemple
exemple, |:help|). Cela indique un lien hypertexte. Si vous positionnez 
le curseur n'importe où
entre les barres et appuyez sur CTRL+] (passer au tag), le système d'aide vous amène au
sujet indiqué. (Pour des raisons non abordées ici, la terminologie Vim pour un 
lien hypertexte
est une balise. Donc CTRL+] saute à l'emplacement de la balise donnée par le mot 
sous le curseur.)
Après quelques sauts, vous aurez peut-être envie de revenir en arrière. CTRL+T 
(balise pop) vous ramène à
l’écran précédent. Ou en termes Vim, cela « supprime une balise de la pile de balises ».
En haut de cet écran, il y a la notation *help.txt*. Elle est utilisée par l'aide
système pour définir une balise (destination du lien hypertexte). Chapitre 7, 
« Commandes pour
Programmeurs », explique les balises en détail.
Pour obtenir de l'aide sur un sujet donné, utilisez la commande suivante :

:help subject

Pour obtenir de l'aide sur la commande x, par exemple, saisissez ce qui suit :

:help x

Pour savoir comment supprimer du texte, utilisez cette commande :

:help deleting

Pour obtenir un index complet de ce qui est disponible, utilisez la commande suivante :

:help index

Lorsque vous avez besoin d'aide pour une commande de caractère de contrôle 
(par exemple, CTRL-A,
vous devez l'épeler avec le préfixe CTRL-.

:help CTRL-A

L'éditeur Vim propose de nombreux modes différents. Par défaut, le système d'aide 
affiche le
commandes en mode normal. Par exemple, la commande suivante affiche l'aide pour
la commande CTRL-H en mode normal :

:help CTRL-H

Pour identifier d'autres modes, utilisez un préfixe de mode.
Si vous souhaitez obtenir de l'aide pour la version en mode insertion de cette 
commande, préfixez la clé
avec i_. Cela vous donne la commande suivante :

:help i_CTRL-H

Le tableau 1.1 répertorie plusieurs autres préfixes de mode.

Lorsque vous démarrez l'éditeur Vim, vous pouvez utiliser plusieurs options 
de ligne de commande.
tous commencent par un tiret (-). Pour trouver ce que fait l'option de ligne de 
commande -t, par exemple,
utilise la commande

:help -t

L'éditeur Vim dispose d'un certain nombre d'options qui vous permettent de 
configurer et de personnaliser
l'éditeur. Si vous souhaitez de l'aide pour une option, vous devez la mettre 
entre guillemets simples
marques. Pour savoir à quoi sert l'option numérique, par exemple, utilisez ce qui suit
commande:

:help 'number'

Le tableau suivant résume les préfixes spéciaux.

Table 1.1 Help Prefixes
What                    Prefix          Example
Normal-mode commands    (nothing)       :help x
Control character       CTRL-           :help CTRL-u
Visual-mode commands    v               :help v_u
Insert-mode commands    i               :help i_<Esc>
ex-mode commands        :               :help :quit
Command-line editing    c               :help c_<Del>
Vim command arguments   -               :help -r
Options                 ‘ (both ends)   :help ‘textwidth

Les touches spéciales sont placées entre crochets angulaires. Pour trouver de l'aide 
sur la touche fléchée vers le haut, par exemple
Par exemple, utilisez cette commande :

:help <Up>

L'Annexe B, « Les noms de clés <> » fournit une liste complète des noms de clés.

Autres moyens d'obtenir de l'aide

Vous pouvez accéder à l'écran d'aide en appuyant sur la touche <F1>. 
Cela affiche les informations générales
écran d'aide, et vous pouvez naviguer à partir de là. 
Si votre clavier possède une touche <Help>, vous
peut également l'utiliser.

Utiliser un décompte pour éditer plus rapidement

Supposons que vous souhaitiez remonter de neuf lignes. 
Vous pouvez taper kkkkkkkkk ou saisir
la commande 9k.
En fait, vous pouvez faire précéder toutes les commandes de mouvement d'un numéro.
Plus tôt dans ce
Dans ce chapitre, par exemple, vous avez ajouté trois points d'exclamation à la fin 
d'une ligne en tapant a!!!<Esc>. Une autre façon de procéder consiste à utiliser 
la commande 3a!<Esc>.Le nombre de
3 indique à la commande a d'insérer ce qui suit (!) trois fois.
De même, pour supprimer trois caractères, utilisez la commande 3x.

Le tutoriel Vim

La version UNIX de l'éditeur Vim est livrée avec un didacticiel interactif. Leçon 1
couvre la plupart des commandes décrites dans ce chapitre.
Pour appeler le didacticiel sous UNIX, utilisez la commande suivante :

$ vimtutor

Le didacticiel commence par expliquer les commandes de mouvement afin que vous puissiez 
vous déplacer
à travers le tutoriel. Après cela, il introduit progressivement des commandes 
plus complexes.
Si vous êtes sur un système non Unix, exécutez la commande

:help tutor

pour plus d'informations sur la façon de faire fonctionner le didacticiel 
Vim sur votre système (ce n'est pas le cas
difficile).

Résumé

Vous en savez maintenant suffisamment pour éditer avec Vim.
Pas bien ni vite, mais vous pouvez éditer.Prenez
un peu de temps pour s'entraîner avec ces commandes avant de passer au chapitre suivant.
Après avoir assimilé ces commandes, vous pouvez passer aux commandes plus avancées.
qui vous permettent d'éditer plus rapidement et plus facilement.

#================================================
### Édition un peu plus rapide
#================================================

Les commandes de base couvertes dans le chapitre 1, « Édition de base », 
vous permettent d'éditer
text. Ce chapitre couvre quelques commandes supplémentaires qui vous permettent 
d'éditer plus efficacement. Ces commandes sont les suivantes :

n Commandes de mouvement supplémentaires
n Recherches rapides sur une seule ligne
n Commandes de suppression et de modification supplémentaires
n La commande répéter
n Macros de clavier (comment enregistrer et lire des commandes)
n Digraphes

L'une des choses que j'ai remarquées en écrivant ce chapitre est le nombre incroyable de
façons de vous déplacer dans un fichier. Bien que j'utilise Vi et maintenant Vim 
comme mon
rédacteur principal depuis 15 ans, je n’ai jamais pris la peine de tous les apprendre. 
je reçois par
avec les 10% que j'aime.
Il existe de nombreuses façons différentes de faire les choses dans Vim. 
Ce chapitre traite d'une
sélection utile de toutes les commandes possibles.

Mouvement des mots

Commençons par le mouvement. Pour avancer le curseur d’un mot, utilisez la commande w.
La commande b recule d'un mot. Comme la plupart des commandes Vim, 
vous pouvez utiliser un
préfixe numérique pour passer plusieurs mots. Par exemple, 4b recule de quatre mots.
La figure 2.1 montre le fonctionnement de ces commandes.


#================================================
### Fin
#================================================
