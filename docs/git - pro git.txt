#================================================
### git - pro git
#================================================
### Licence
#================================================
Ce travail est sous licence Creative Commons Attribution-NonCommercial-ShareAlike 3.0
Licence non portée. Pour afficher une copie de cette licence, visitez https://creativecommons.org/licenses/by-ncsa/3.0 ou envoyez une lettre à Creative Commons, PO Box 1866, Mountain View, CA 94042, États-Unis.
#================================================
### Préface de Scott Chacon
#================================================
Bienvenue dans la deuxième édition de Pro Git. La première édition a été publiée il y a maintenant plus de quatre ans.
Depuis, beaucoup de choses ont changé, mais de nombreuses choses importantes restent inchangées. Alors que la majeure partie du noyau
les commandes et les concepts sont toujours valables aujourd'hui car l'équipe principale de Git est assez fantastique pour garder
choses rétrocompatibles, il y a eu des ajouts et des changements importants dans le
communauté entourant Git. La deuxième édition de ce livre vise à aborder ces changements et
mettez à jour le livre afin qu'il puisse être plus utile au nouvel utilisateur.

Lorsque j'ai écrit la première édition, Git était encore un outil relativement difficile à utiliser et à peine adopté pour les applications Web.
le hacker le plus dur. Elle commençait à prendre de l'ampleur dans certaines communautés, mais n'avait pas atteint
n'importe où près de l'omniprésence qu'il a aujourd'hui. Depuis lors, presque toutes les communautés open source ont
l'a adopté. Git a fait des progrès incroyables sur Windows, dans l'explosion du nombre d'utilisateurs graphiques
des interfaces pour toutes les plates-formes, dans le support IDE et dans une utilisation professionnelle. Le Pro Git d'il y a quatre ans
ne sait rien de tout cela. L'un des principaux objectifs de cette nouvelle édition est d'aborder toutes ces nouveautés
frontières dans la communauté Git.

La communauté Open Source utilisant Git a également explosé. Quand je me suis assis au départ pour écrire le
livre il y a près de cinq ans (il m'a fallu du temps pour sortir la première version), je venais de commencer à travailler
dans une entreprise très peu connue développant un site d'hébergement Git appelé GitHub. Au moment de la
En publiant, il y avait peut-être quelques milliers de personnes qui utilisaient le site et seulement quatre d'entre nous y travaillaient.
Au moment où j'écris cette introduction, GitHub annonce notre 10 millionième projet hébergé, avec près de 5
millions de comptes de développeurs enregistrés et plus de 230 employés. Aimez-le ou détestez-le, GitHub a
a profondément modifié de larges pans de la communauté Open Source d'une manière à peine concevable
quand je me suis assis pour écrire la première édition.

J'ai écrit une petite section dans la version originale de Pro Git sur GitHub comme exemple de Git hébergé
avec lequel je n'ai jamais été très à l'aise. Je n'aimais pas beaucoup le fait d'écrire ce que je ressentais
essentiellement une ressource communautaire et je parle également de mon entreprise. Même si je n'aime toujours pas
ce conflit d'intérêts, l'importance de GitHub dans la communauté Git est inévitable. Au lieu de
un exemple d'hébergement Git, j'ai décidé de transformer cette partie du livre en une description plus approfondie
ce qu'est GitHub et comment l'utiliser efficacement. Si vous souhaitez apprendre à utiliser Git, sachez
comment utiliser GitHub vous aidera à participer à une immense communauté, précieuse quelle que soit la situation.
Hôte Git que vous décidez d'utiliser pour votre propre code.

L'autre grand changement survenu depuis la dernière publication a été le développement et l'essor de
le protocole HTTP pour les transactions réseau Git. La plupart des exemples du livre ont été
est passé de SSH à HTTP car c'est tellement plus simple.
C’est incroyable de voir Git grandir au cours des dernières années à partir d’une version relativement obscure.
système de contrôle pour dominer fondamentalement le contrôle de version commercial et open source. Je suis content que
Pro Git a très bien réussi et a également pu être l'un des rares livres techniques sur le marché
c'est à la fois assez réussi et entièrement open source.
J'espère que vous apprécierez cette édition mise à jour de Pro Git.
#================================================
### Préface de Ben Straub
#================================================
C’est la première édition de ce livre qui m’a rendu accro à Git. C'était mon introduction à un style de
créer un logiciel qui semblait plus naturel que tout ce que j'avais vu auparavant. J'étais développeur depuis
plusieurs années à l'époque, mais c'était le bon tournant qui m'a envoyé sur un chemin beaucoup plus intéressant
que celui sur lequel j'étais.
Aujourd'hui, des années plus tard, je contribue à une implémentation majeure de Git, j'ai travaillé pour le plus grand Git
société d'hébergement, et j'ai parcouru le monde pour enseigner Git aux gens. Quand Scott m'a demandé si je serais
intéressé à travailler sur la deuxième édition, je n’ai même pas eu besoin de réfléchir.
Ce fut un grand plaisir et un privilège de travailler sur ce livre. J'espère que cela vous aidera autant qu'il l'a fait
moi.
#================================================
### Introduction
#================================================
Vous êtes sur le point de passer plusieurs heures de votre vie à lire sur Git. Prenons une minute pour expliquer
ce que nous vous réservons. Voici un bref résumé des dix chapitres et des trois annexes de
ce livre.

Dans le chapitre 1, nous allons aborder les systèmes de contrôle de version (VCS) et les bases de Git — aucune technique
des trucs, ce qu'est Git, pourquoi il est né dans un pays rempli de VCS, ce qui le distingue et pourquoi tant de
les gens l'utilisent. Ensuite, nous vous expliquerons comment télécharger Git et le configurer pour la première fois si vous
vous ne l'avez pas déjà sur votre système.

Dans le chapitre 2, nous passerons en revue l'utilisation de base de Git : comment utiliser Git dans les 80 % des cas que vous rencontrerez.
le plus souvent. Après avoir lu ce chapitre, vous devriez être capable de cloner un dépôt, voir ce qui a été
s'est produit dans l'historique du projet, modifier des fichiers et apporter des modifications. Si le livre
s'enflamme spontanément à ce stade, vous devriez déjà être assez utile avec Git au moment où il
vous emmène aller chercher un autre exemplaire.

Le chapitre 3 concerne le modèle de branchement dans Git, souvent décrit comme la fonctionnalité phare de Git. Ici, vous allez
découvrez ce qui distingue vraiment Git du reste. Lorsque vous avez terminé, vous ressentirez peut-être le besoin de passer une
moment de calme en réfléchissant à la façon dont vous viviez avant que le branchement Git ne fasse partie de votre vie.

Le chapitre 4 couvrira Git sur le serveur. Ce chapitre est destiné à ceux d'entre vous qui souhaitent configurer Git à l'intérieur
votre organisation ou sur votre propre serveur personnel pour la collaboration. Nous explorerons également diverses
options hébergées si vous préférez laisser quelqu'un d'autre gérer cela pour vous.

Le chapitre 5 passera en revue en détail divers flux de travail distribués et comment les réaliser.
avec Git. Lorsque vous aurez terminé ce chapitre, vous devriez être capable de travailler de manière experte avec plusieurs
référentiels distants, utilisez Git par courrier électronique et jonglez habilement avec de nombreuses branches distantes et
correctifs contribués.

Le chapitre 6 couvre en profondeur le service d'hébergement et les outils GitHub. Nous couvrons l'inscription et
gérer un compte, créer et utiliser des référentiels Git, des workflows courants auxquels contribuer
projets et pour accepter des contributions aux vôtres, l'interface de programmation de GitHub et plein de petits conseils
pour vous faciliter la vie en général.

Le chapitre 7 concerne les commandes Git avancées. Ici, vous découvrirez des sujets tels que la maîtrise du
commande 'reset' effrayante, utilisant la recherche binaire pour identifier les bogues, l'historique d'édition, la sélection des révisions dans
détails, et bien plus encore. Ce chapitre complétera vos connaissances sur Git afin que vous soyez véritablement un
maître.

Le chapitre 8 concerne la configuration de votre environnement Git personnalisé. Cela inclut la configuration de scripts de hook
pour appliquer ou encourager des politiques personnalisées et utiliser les paramètres de configuration de l'environnement afin que vous
pouvez travailler comme vous le souhaitez. Nous couvrirons également la création de votre propre ensemble de scripts pour appliquer un
politique de validation personnalisée.

Le chapitre 9 traite de Git et d'autres VCS. Cela inclut l'utilisation de Git dans un monde Subversion (SVN) et
conversion de projets d'autres VCS vers Git. De nombreuses organisations utilisent encore SVN et ne sont pas sur le point de le faire.
changement, mais à ce stade, vous aurez appris l'incroyable puissance de Git - et ce chapitre montre
vous comment faire face si vous devez toujours utiliser un serveur SVN. Nous expliquons également comment importer des projets depuis
8
plusieurs systèmes différents au cas où vous parviendrez à convaincre tout le monde de franchir le pas.

Le chapitre 10 plonge dans les profondeurs obscures mais magnifiques des composants internes de Git. Maintenant que tu sais tout
à propos de Git et que vous pouvez l'utiliser avec puissance et grâce, vous pouvez discuter de la façon dont Git stocke ses
objets, quel est le modèle objet, les détails des fichiers pack, les protocoles du serveur, etc. Tout au long de la
livre, nous ferons référence aux sections de ce chapitre au cas où vous auriez envie de plonger profondément à ce stade ; mais si
vous êtes comme nous et souhaitez plonger dans les détails techniques, vous voudrez peut-être d'abord lire le chapitre 10.
Nous vous laissons cela à vous.

Dans l'Annexe A, nous examinons un certain nombre d'exemples d'utilisation de Git dans divers environnements spécifiques. Nous
couvrir un certain nombre d'interfaces graphiques et d'environnements de programmation IDE différents que vous souhaiterez peut-être utiliser
Inscrivez-vous et ce qui est disponible pour vous. Si vous souhaitez un aperçu de l’utilisation de Git dans votre shell,
votre IDE ou votre éditeur de texte, jetez un œil ici.

Dans l'annexe B, nous explorons la création de scripts et l'extension de Git via des outils tels que libgit2 et JGit. Si vous êtes
intéressé par l'écriture d'outils personnalisés complexes et rapides et qui a besoin d'un accès Git de bas niveau, c'est ici que vous
peut voir à quoi ressemble ce paysage.
Enfin, dans l'Annexe C, nous passons en revue toutes les principales commandes Git une par une et examinons où
dans le livre, nous les avons abordés et ce que nous en avons fait. Si vous voulez savoir où dans le livre
nous avons utilisé n'importe quelle commande Git spécifique, vous pouvez la rechercher ici.
Commençons.
#================================================
